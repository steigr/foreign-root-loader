#!/bin/bash
[[ "$LISTEN_TRACE" ]] && set -x
set -eo pipefail

export MAXIMUM_SLEEP=${1:-60}
export CONTAINER_ID=$(faketty docker run --log-driver=none --detach=true --net=host --cap-add=NET_ADMIN --volume=/bin:/bin:ro --volume=/sbin:/sbin:ro --volume=/lib:/lib:ro --volume=/lib64:/lib64:ro --volume=/usr:/usr:ro --volume=/etc:/etc:ro --volume=/var:/var:ro --volume=/run:/run --volume=/dev/log:/dev/log busybox sleep $MAXIMUM_SLEEP | xargs )
until [[ $(docker inspect --format='{{.State.Pid}}' $CONTAINER_ID 2>/dev/null </dev/null) -gt 0 ]]; do sleep .1; done

_dst() { ip r g 1 | awk '{print $7}'; }
_dgw() { ip r g 1 | awk '{print $3}'; }
_docker() { docker exec "$CONTAINER_ID" "$@"; }
_docker_bridge() { _docker ip -4 -o a s | grep $(_dgw) | xargs | awk '{print $2}'; }
_iptables() { _docker iptables "$@"; }
_add_rule() { table=$1; tag=$2; shift 2; _iptables -t "$table" -m comment --comment "$tag" "$@"; }

service=$(value-of com.docker.swarm.service.name)

for port in $(value-of foreign-root.publish | tr ',' '\n'); do
  tag="dkr-$(echo $service $port | md5sum | awk '{print $1}')"
  dst="$(_dst)"
  bridge="$(_docker_bridge)"
  # add new rules
  echo "Publishing Port $port to $dst with tag $tag"
  _add_rule nat "$tag" -I POSTROUTING -s $dst/32 -d $dst/32 -p tcp -m tcp --dport $port -j MASQUERADE
  _add_rule nat "$tag" -I DOCKER ! -i $bridge -p tcp -m tcp --dport $port -j DNAT --to-destination $dst:$port
  _add_rule nat "$tag" -I DOCKER -d $dst/32 ! -i $bridge -o $bridge -p tcp -m tcp --dport $port -j ACCEPT
  _add_rule filter "$tag" -I DOCKER -p tcp -m tcp --dport $port -j ACCEPT
  _add_rule filter "$tag" -I DOCKER -p tcp -m state --state RELATED,ESTABLISHED -m tcp --sport $port -j ACCEPT
done

docker rm -f "$CONTAINER_ID"